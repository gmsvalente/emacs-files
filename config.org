#+TITLE: My emacs configuration file
#+AUTHOR: Gustavo V.
#+STARTUP: fold

These emacs configuration uses literate programming to create my emacs config file.
All the configuration are create into one file config.el which is automatic loaded.
~WIP~
* Global Settings
** custom-file
The custom-file is a variable bounded to custom.el file and is auto-populated by emacs used for storing customization information.
#+begin_src emacs-lisp
  (defvar custom-file-path (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file-path)
    (setq custom-file custom-file-path)
    (load custom-file))
#+end_src
** backup directory
Store the backup files *~ into .backup~ folder.
#+begin_src emacs-lisp
  (setq backup-directory-alist `((".*" . ".backup~/")))
#+end_src
** yes-or-no-p
Change yes and no to y and n.
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
* UI
** emacs tweaks
Customize the frames removing some bar modes.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
** themes
Install themes.
#+begin_src emacs-lisp
  (use-package zenburn-theme :ensure t)
  (use-package spacemacs-theme :ensure t :disabled t)
  (use-package all-the-icons  :ensure t)
  (load-theme 'zenburn 'no-confirm)
#+end_src
** rainbow-delimiters
Use rainbow-delimiters to better see your parentheses.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode)
    :custom-face
    (rainbow-delimiters-depth-1-face ((t (:foreground "dark orange"))))
    (rainbow-delimiters-depth-2-face ((t (:foreground "deep pink"))))
    (rainbow-delimiters-depth-3-face ((t (:foreground "chartreuse"))))
    (rainbow-delimiters-depth-4-face ((t (:foreground "deep sky blue"))))
    (rainbow-delimiters-depth-5-face ((t (:foreground "yellow"))))
    (rainbow-delimiters-depth-6-face ((t (:foreground "orchid"))))
    (rainbow-delimiters-depth-7-face ((t (:foreground "spring green"))))
    (rainbow-delimiters-depth-8-face ((t (:foreground "sienna1")))))
#+end_src
** linum-mode
#+begin_src emacs-lisp
  (global-linum-mode t)
  (defface linum-padding
    `((t :inherit linum
	 :foreground ,(face-attribute 'linum :foreground nil t)))
    "Face for displaying leading zeroes"
    :group 'linum)

  (defface linum-current-line
    '((t :inherit linum
	 :foreground "green"))
    "Face for > current line"
    :group 'linum)

  (defvar linum-current-line 1 "Current line at cursor")

  (defadvice linum-update (before active-linum-update activate)
    (setq linum-current-line (line-number-at-pos)))

  (defun linum-format-fn (line)
    (let ((width (length (number-to-string (count-lines (point-min) (point-max))))))
      (concat
       (propertize " " 'face 'linum-padding)
       (propertize (make-string (- width (length (number-to-string line))) ?0) 'face 'linum-padding)
       (propertize (number-to-string line) 'face 'linum)
       (if (= line linum-current-line)
	   (propertize ">" 'face 'linum-current-line)
	 (propertize " " 'face 'linum-padding)))))

  (setq linum-format 'linum-format-fn)
#+end_src

* UX
** dashboard
Use dashboard to fast select files and projects.
If starting emacs with --daemon, prevent dashboard warning about loaded banner  by creating init-dashboard use-package.
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq dashboard-startup-banner (expand-file-name "assets/images/figo-green.png" user-emacs-directory))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-items '((recents . 15)))
    :config
    (dashboard-modify-heading-icons
     '((recents . "file-text"))))

  (use-package init-dashboard
    :after 'dashboard
    :init
    (dashboard-setup-startup-hook))
#+end_src
** yasnippets
Insert pre-formatted codes.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+end_src
** paredit
Auto close your parentheses
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :hook ((lisp-interaction-mode prog-mode lisp-mode emacs-lisp-mode) . enable-paredit-mode))

#+end_src
** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (ivy-mode t))

#+end_src
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+end_src

* Productivity
Use for create a menu for which keys to select.
** whick-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

#+end_src
** org
Use org-mode for enhance your productivity.
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode))
#+end_src
** ssh-agency
#+begin_src emacs-lisp
  (use-package ssh-agency
    :ensure t)
#+end_src

** magit
Magit is really a git porcelain.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
* Programming
** yaml
Yaml mode.
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode)))
#+end_src
** clojure
#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config
    (require 'flycheck-clj-kondo))

  (use-package cider
    :ensure t)

  (use-package flycheck-clj-kondo
    :ensure t)


  (defun clj-refactor-hook-fn ()
    (clj-refactor-mode 1)
    ;(yas-minor-mode 1)
    )

  (use-package clj-refactor
    :ensure t
    :hook (clojure-mode . clj-refactor-hook-fn))
#+end_src
** slime
#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
  (load (expand-file-name "~/.quicklisp/slime-helper.el"))
#+end_src

* Export to README.md
Export this config.org to a README.md.
<<disabled>>
#+begin_src emacs-lisp :tangle no
  (defun config.org->README.md ()
    (find-file config-file)
    (switch-to-buffer "config.org")
    (org-md-export-as-markdown)
    (switch-to-buffer "*Org MD Export*")
    (write-file "~/.emacs.d/README.md"))
#+end_src
